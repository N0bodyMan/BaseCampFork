// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

/// @title UnburnableToken
/// @notice Простейший токен, который нельзя сжечь, но можно получить 1 раз и передавать другим
contract UnburnableToken {
    // Метаданные токена
    string public constant name = "UnburnableToken";
    string public constant symbol = "UNT";
    uint8 public constant decimals = 18;

    uint256 public immutable totalSupply; // Общий запас
    uint256 public totalClaimed;          // Сколько всего выдано

    // Балансы пользователей
    mapping(address => uint256) public balances;
    // Кто уже получил токены
    mapping(address => bool) private claimed;

    // События
    event Claimed(address indexed account, uint256 amount);
    event Transfer(address indexed from, address indexed to, uint256 amount);

    // Ошибки
    error TokensAlreadyClaimed();
    error AllTokensClaimed();
    error InvalidRecipient(address to);
    error InsufficientBalance(uint256 balance, uint256 required);

    /// @notice Конструктор задает общий supply
    constructor(uint256 _totalSupply) {
        require(_totalSupply > 0, "Total supply must be > 0");
        totalSupply = _totalSupply;
    }

    /// @notice Заявка на бесплатные токены (каждый адрес может получить только 1 раз)
    function claim(uint256 amount) external {
        if (totalClaimed + amount > totalSupply) revert AllTokensClaimed();
        if (claimed[msg.sender]) revert TokensAlreadyClaimed();

        claimed[msg.sender] = true;
        balances[msg.sender] += amount;
        totalClaimed += amount;

        emit Claimed(msg.sender, amount);
    }

    /// @notice Безопасный перевод токенов
    function transfer(address to, uint256 amount) external {
        if (to == address(0)) revert InvalidRecipient(to);

        uint256 balance = balances[msg.sender];
        if (balance < amount) revert InsufficientBalance(balance, amount);

        balances[msg.sender] = balance - amount;
        balances[to] += amount;

        emit Transfer(msg.sender, to, amount);
    }
}
