// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "@openzeppelin/contracts/access/Ownable.sol";

/// @title AddressBook
/// @notice Контракт для хранения контактов (только владелец может управлять)
contract AddressBook is Ownable {
    /// @dev Структура контакта
    struct Contact {
        uint256 id;             // Уникальный ID
        string firstName;       // Имя
        string lastName;        // Фамилия
        uint256[] phoneNumbers; // Список телефонов
    }

    // Хранилище контактов
    Contact[] private contacts;
    // Быстрый поиск по ID → индекс в массиве
    mapping(uint256 => uint256) private idToIndex;
    // Следующий ID для добавления
    uint256 private nextId = 1;

    // --- События ---
    event ContactAdded(uint256 indexed id, string firstName, string lastName);
    event ContactUpdated(uint256 indexed id);
    event ContactDeleted(uint256 indexed id);

    // --- Ошибки ---
    error ContactNotFound(uint256 id);

    /// @notice Добавить новый контакт
    function addContact(
        string calldata firstName,
        string calldata lastName,
        uint256[] calldata phoneNumbers
    ) external onlyOwner {
        contacts.push(Contact(nextId, firstName, lastName, phoneNumbers));
        idToIndex[nextId] = contacts.length - 1;

        emit ContactAdded(nextId, firstName, lastName);
        nextId++;
    }

    /// @notice Обновить существующий контакт
    function updateContact(
        uint256 id,
        string calldata firstName,
        string calldata lastName,
        uint256[] calldata phoneNumbers
    ) external onlyOwner {
        uint256 index = idToIndex[id];
        if (index >= contacts.length || contacts[index].id != id) {
            revert ContactNotFound(id);
        }

        contacts[index].firstName = firstName;
        contacts[index].lastName = lastName;
        contacts[index].phoneNumbers = phoneNumbers;

        emit ContactUpdated(id);
    }

    /// @notice Удалить контакт по ID
    function deleteContact(uint256 id) external onlyOwner {
        uint256 index = idToIndex[id];
        if (index >= contacts.length || contacts[index].id != id) {
            revert ContactNotFound(id);
        }

        // Перемещаем последний контакт на место удаляемого
        uint256 lastIndex = contacts.length - 1;
        if (index != lastIndex) {
            contacts[index] = contacts[lastIndex];
            idToIndex[contacts[index].id] = index;
        }

        contacts.pop();
        delete idToIndex[id];

        emit ContactDeleted(id);
    }

    /// @notice Получить контакт по ID
    function getContact(uint256 id) external view returns (Contact memory) {
        uint256 index = idToIndex[id];
        if (index >= contacts.length || contacts[index].id != id) {
            revert ContactNotFound(id);
        }
        return contacts[index];
    }

    /// @notice Получить все контакты
    function getAllContacts() external view returns (Contact[] memory) {
        return contacts;
    }

    /// @notice Количество контактов
    function count() external view returns (uint256) {
        return contacts.length;
    }
}
